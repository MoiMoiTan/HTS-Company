/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Category = {
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  subCategories?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "category";
  }>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Category | Slug;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/helpers/queries.ts
// Variable: PRODUCT_BY_SLUG_QUERY
// Query: *[_type == 'product' && slug.current == $slug] | order(name asc) [0]
export type PRODUCT_BY_SLUG_QUERYResult = null;
// Variable: CATEGORIES_QUERY
// Query: *[_type == "category" && !(_id in *[_type == "category"].subCategories[]._ref)] | order(title asc) {        _id,        title,        "slug": slug.current,        ...,        "subCategories": subCategories[]->{          _id,          title,          "slug": slug.current,          description,          ...      }    }
export type CATEGORIES_QUERYResult = Array<{
  _id: string;
  _type: "category";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  image?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
}>;
// Variable: MY_ORDERS_QUERY
// Query: *[_type == 'order' && clerkUserId == $userId] | order(orderDate desc) {      _id,      customerName,      email,      orderDate,      totalPrice,      currency,      status,      invoice,      amountDiscount,      address,      phoneNumber,      products[] {        quantity,        product-> {          _id,          name,          price,          discount,          images        }      }    }
export type MY_ORDERS_QUERYResult = Array<never>;
// Variable: PRODUCTS_BY_CATEGORY_SLUG_QUERY
// Query: *[_type == "product" && references(*[_type == "category" && slug.current == $slug]._id)] {      _id,      name,      slug,      images[]{        asset->{          url        }      },      price,      discount,      intro,      description,      stock,      status,      variant,    }
export type PRODUCTS_BY_CATEGORY_SLUG_QUERYResult = Array<never>;
// Variable: CATEGORY_OR_SUBCATEGORY_QUERY
// Query: *[_type == "category" && slug.current == $slug][0]{      _id,      title,      "slug": slug.current,      description,      "subCategories": subCategories[]->{        _id,        title,        "slug": slug.current,        description      }    } ||    *[_type == "category" && $slug in subCategories[].slug.current][0]{      "foundItem": subCategories[slug.current == $slug][0]{        _id,        title,        "slug": slug.current,        description      }    }.foundItem
export type CATEGORY_OR_SUBCATEGORY_QUERYResult = null;
// Variable: CATEGORY_DATA_QUERY
// Query: *[_type == "category" && slug.current == $slug][0] {    _id,    title,    description  }
export type CATEGORY_DATA_QUERYResult = {
  _id: string;
  title: string | null;
  description: string | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == 'product' && slug.current == $slug] | order(name asc) [0]": PRODUCT_BY_SLUG_QUERYResult;
    "\n    *[_type == \"category\" && !(_id in *[_type == \"category\"].subCategories[]._ref)] | order(title asc) {\n        _id,\n        title,\n        \"slug\": slug.current,\n        ...,\n        \"subCategories\": subCategories[]->{\n          _id,\n          title,\n          \"slug\": slug.current,\n          description,\n          ...\n      }\n    }": CATEGORIES_QUERYResult;
    "\n    *[_type == 'order' && clerkUserId == $userId] | order(orderDate desc) {\n      _id,\n      customerName,\n      email,\n      orderDate,\n      totalPrice,\n      currency,\n      status,\n      invoice,\n      amountDiscount,\n      address,\n      phoneNumber,\n      products[] {\n        quantity,\n        product-> {\n          _id,\n          name,\n          price,\n          discount,\n          images\n        }\n      }\n    }\n  ": MY_ORDERS_QUERYResult;
    "\n    *[_type == \"product\" && references(*[_type == \"category\" && slug.current == $slug]._id)] {\n      _id,\n      name,\n      slug,\n      images[]{\n        asset->{\n          url\n        }\n      },\n      price,\n      discount,\n      intro,\n      description,\n      stock,\n      status,\n      variant,\n    }\n  ": PRODUCTS_BY_CATEGORY_SLUG_QUERYResult;
    "\n    *[_type == \"category\" && slug.current == $slug][0]{\n      _id,\n      title,\n      \"slug\": slug.current,\n      description,\n      \"subCategories\": subCategories[]->{\n        _id,\n        title,\n        \"slug\": slug.current,\n        description\n      }\n    } ||\n    *[_type == \"category\" && $slug in subCategories[].slug.current][0]{\n      \"foundItem\": subCategories[slug.current == $slug][0]{\n        _id,\n        title,\n        \"slug\": slug.current,\n        description\n      }\n    }.foundItem\n  ": CATEGORY_OR_SUBCATEGORY_QUERYResult;
    "\n  *[_type == \"category\" && slug.current == $slug][0] {\n    _id,\n    title,\n    description\n  }\n": CATEGORY_DATA_QUERYResult;
  }
}
